Language Recognizer implements an algorithm to determine if a set of characters in a string and determines if whether or not they satisfy the conditions for our fictional language.- The specific language can be expressed in this equation -L = {a*b} union {ab*}Our program has the following classes:- LanguageVector: This class implements multiple functions like; nextChar(char c) - Accepts a character and puts it in a string, also counts which character was enteredisIn() – Takes a string of characters and runs it through an algorithm to determine if the string satisfies the required conditions.reset() – Clears the string of characters and our ‘a’, ‘b’, and ‘element’ variables.A() – Returns an interger representing how many ‘a’s are in our string.B() – Returns an interger representing how many ‘b’s are in our string.Vector<Character> test() – Returns what characters are in our string.- LanguageTester: This class contains our ‘main’ section and has the code to input characters in our string and run them through our algorithm to determine if they satisfy the required conditions and displays the results. I have set it up to run four separate tests with different characters in the string to test multiple scenarios. - Recognizer: This class is our interface that provides a recognizer for our created language. This constructor is called upon from the LanguageTester class. This class also includes the same functions found in our LanguageVector class, such as nextChar(char c), isIn(), reset(), A(), B(), and Vector<Character> test(). 